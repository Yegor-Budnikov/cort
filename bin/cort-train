#!/usr/bin/env python

import argparse
import codecs
import logging
import pickle
import sys
import os
import subprocess

import cort
from cort.core import corpora
from cort.core import mention_extractor
from cort.coreference import experiments
from cort.coreference import features
from cort.coreference import instance_extractors
from cort.util import import_helper


__author__ = 'smartschat'
"""
Dummy counter
Writes a line every 100 documents
"""

dummy_counter_for_train = 0


logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s %(levelname)s %(''message)s')


def parse_args():
    parser = argparse.ArgumentParser(description='Train coreference resolution '
                                                 'models.')
    parser.add_argument('-in',
                        required=True,
                        dest='input_filename',
                        help='The input file. Must follow the format of the '
                             'CoNLL shared tasks on coreference resolution '
                             '(see http://conll.cemantix.org/2012/data.html).)')
    parser.add_argument('-out',
                        dest='output_filename',
                        required=True,
                        help='The output file the learned model will be saved '
                             'to.')
    parser.add_argument('-ante',
                        dest='ante',
                        help='The file where antecedent predictions will be'
                             'stored to.')
    parser.add_argument('-extractor',
                        dest='extractor',
                        required=True,
                        help='The function to extract instances.')
    parser.add_argument('-perceptron',
                        dest='perceptron',
                        required=True,
                        help='The perceptron to use.')
    parser.add_argument('-clusterer',
                        dest='clusterer',
                        required=True,
                        help='The clusterer to use.')
    parser.add_argument('-cost_function',
                        dest='cost_function',
                        required=True,
                        help='The cost function to use.')
    parser.add_argument('-n_iter',
                        dest='n_iter',
                        default=5,
                        help='Number of perceptron iterations. Defaults to 5.')
    parser.add_argument('-cost_scaling',
                        dest='cost_scaling',
                        default=1,
                        help='Scaling factor of the cost function. Defaults '
                             'to 1')
    parser.add_argument('-random_seed',
                        dest='seed',
                        default=23,
                        help='Random seed for training data shuffling. '
                             'Defaults to 23.')
    parser.add_argument('-features',
                        dest='features',
                        help='The file containing the list of features. If not'
                             'provided, defaults to a standard set of'
                             'features.')
    parser.add_argument('-dropout_input',
                        dest='dropout_input',
                        help='The percentage of input data to drop out.')
    parser.add_argument('-dropout_hidden_layer',
                        dest='dropout_hidden_layer',
                        help='The percentage of neurons in the hidden layer to'
                             'drop out.')
    return parser.parse_args()

# Copy-paste!
def get_scores(output_data, gold_data):
    print(cort.__path__[0] + "\\reference-coreference-scorers\\v8.01\\scorer.pl")
    print(os.getcwd() + "\\" + output_data)
    scorer_output = subprocess.check_output([
        "E:\\buML\\Strawberry\\perl\\bin\\perl.exe",
        cort.__path__[0] + "\\reference-coreference-scorers\\v8.01\\scorer.pl",
        "all",
        gold_data,
        output_data,
        # os.getcwd() + "\\" + output_data,
        "none"]).decode()

    metrics = ['muc', 'bcub', 'ceafm', 'ceafe', 'blanc']

    metrics_results = {}

    metric = None

    results_formatted = ""

    for line in scorer_output.split("\n"):
        if not line:
            continue

        splitted = line.split()

        if splitted == []:
            continue

        if splitted[0] == "METRIC":
            metric = line.split()[1][:-1]

        if (metric != 'blanc' and line.startswith("Coreference:")) \
           or (metric == 'blanc' and line.startswith("BLANC:")):
            metrics_results[metric] = (
                float(splitted[5][:-1]),
                float(splitted[10][:-1]),
                float(splitted[12][:-1]),
            )

    results_formatted += "\tR\tP\tF1\n"

    for metric in metrics:
        results_formatted += metric + "\t" + \
            "\t".join([str(val) for val in metrics_results[metric]]) + "\n"
    results_formatted += "\n"
    average = (metrics_results["muc"][2] + metrics_results["bcub"][2] +
               metrics_results["ceafe"][2])/3
    results_formatted += "conll\t\t\t" + format(average, '.2f') + "\n"

    return results_formatted


if sys.version_info[0] == 2:
    logging.warning("You are running cort under Python 2. cort is much more "
                    "efficient under Python 3.3+.")

args = parse_args()

if args.features:
    mention_features, pairwise_features = import_helper.get_features(
        args.features)
else:
    mention_features = [
        features.fine_type,
        features.gender,
        features.number,
        features.sem_class,

        features.compreno_sem_class,
        features.compreno_surf_slot,

        features.deprel,
        features.head_ner,
        features.length,
        features.head,
        features.first,
        features.last,
        features.preceding_token,
        features.next_token,
        features.governor,
        features.ancestry
    ]

    pairwise_features = [
        features.exact_match,
        features.head_match,

        features.compreno_sem_class_exact_match,
        features.compreno_surf_slot_exact_match,
        features.compreno_common_sem_anscestor,

        features.same_speaker,
        features.alias,
        features.sentence_distance,
        features.embedding,
        features.modifier,
        features.tokens_contained,
        features.head_contained,
        features.token_distance
    ]


perceptron = import_helper.import_from_path(args.perceptron)(
    cost_scaling=int(args.cost_scaling),
    n_iter=int(args.n_iter),
    seed=int(args.seed),
    input_dropout_percent=float(args.dropout_input),
    weight_dropout_percent=float(args.dropout_hidden_layer)
)

extractor = instance_extractors.InstanceExtractor(
    import_helper.import_from_path(args.extractor),
    mention_features,
    pairwise_features,
    import_helper.import_from_path(args.cost_function),
    perceptron.get_labels()
)

logging.info("Reading in data.")
training_corpus = corpora.Corpus.from_file("training", codecs.open(args.input_filename, "r", "utf-8"))



logging.info("Extracting system mentions.")
dummy_counter_for_train = 0
for doc in training_corpus:
    if dummy_counter_for_train % 100 == 99:
        logging.info("We are extracting doc " + str(dummy_counter_for_train) + ": " + doc.identifier)
    dummy_counter_for_train += 1
    doc.system_mentions = mention_extractor.extract_system_mentions(doc)

model, mention_entity_mapping, antecedent_mapping = experiments.learn(
    training_corpus,
    extractor,
    perceptron,
    import_helper.import_from_path(args.clusterer)
)

#
# mention_entity_mapping, antecedent_mapping = experiments.predict(
#     training_corpus,
#     extractor,
#     perceptron,
#     import_helper.import_from_path(args.clusterer)
# )

training_corpus.read_coref_decisions(mention_entity_mapping, antecedent_mapping)

logging.info("Write corpus to file.")
training_corpus.write_to_file(codecs.open(args.output_filename, "w", "utf-8"))

if args.ante:
    logging.info("Write antecedent decisions to file")
    training_corpus.write_antecedent_decisions_to_file(open(args.ante, "w"))

if args.input_filename:
    logging.info("Evaluate.")
    print(get_scores(args.output_filename, args.input_filename))

logging.info("Done.")


logging.info("Writing model to file.")
pickle.dump(model, open(args.output_filename, "wb"), protocol=2)

logging.info("Done.")
